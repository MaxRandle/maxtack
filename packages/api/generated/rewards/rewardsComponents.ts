/**
 * Generated by @openapi-codegen
 *
 * @version
 */
import * as reactQuery from "@tanstack/react-query";
import { useRewardsContext, RewardsContext } from "./rewardsContext";
import type * as Fetcher from "./rewardsFetcher";
import { rewardsFetch } from "./rewardsFetcher";

export type PingQueryParams = {
  count: number;
};

export type PingError = Fetcher.ErrorWrapper<undefined>;

export type PingResponse = {
  pong: number;
};

export type PingRequestBody = {
  /**
   * @default rubber
   */
  type?: "plastic" | "rubber" | "wood";
};

export type PingVariables = {
  body?: PingRequestBody;
  queryParams: PingQueryParams;
} & RewardsContext["fetcherOptions"];

export const fetchPing = (variables: PingVariables, signal?: AbortSignal) =>
  rewardsFetch<
    PingResponse,
    PingError,
    PingRequestBody,
    {},
    PingQueryParams,
    {}
  >({ url: "/ping", method: "post", ...variables, signal });

export const usePing = (
  options?: Omit<
    reactQuery.UseMutationOptions<PingResponse, PingError, PingVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRewardsContext();
  return reactQuery.useMutation<PingResponse, PingError, PingVariables>({
    mutationFn: (variables: PingVariables) =>
      fetchPing({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AchievementQueryParams = {
  achievement:
    | "LEVEL_UP_TO_1"
    | "LEVEL_UP_TO_2"
    | "LEVEL_UP_TO_3"
    | "LEVEL_UP_TO_4"
    | "LEVEL_UP_TO_5";
};

export type AchievementError = Fetcher.ErrorWrapper<undefined>;

export type AchievementResponse = {
  reward:
    | "COINS_100"
    | "COINS_200"
    | "COINS_300"
    | "COINS_400"
    | "COINS_500"
    | "EXPERIENCE_MULTIPLIER_2"
    | "EXPERIENCE_MULTIPLIER_3"
    | "EXPERIENCE_MULTIPLIER_4";
};

export type AchievementVariables = {
  queryParams: AchievementQueryParams;
} & RewardsContext["fetcherOptions"];

export const fetchAchievement = (
  variables: AchievementVariables,
  signal?: AbortSignal
) =>
  rewardsFetch<
    AchievementResponse,
    AchievementError,
    undefined,
    {},
    AchievementQueryParams,
    {}
  >({ url: "/reward", method: "get", ...variables, signal });

export const useAchievement = <TData = AchievementResponse>(
  variables: AchievementVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<AchievementResponse, AchievementError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRewardsContext(options);
  return reactQuery.useQuery<AchievementResponse, AchievementError, TData>({
    queryKey: queryKeyFn({
      path: "/reward",
      operationId: "achievement",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAchievement({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/reward";
  operationId: "achievement";
  variables: AchievementVariables;
};
